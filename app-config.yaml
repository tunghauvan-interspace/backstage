app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  env:
    NODE_OPTIONS: --no-node-snapshot

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  '/sonarqube':
    target: https://sonarqube.asean-accesstrade.net/api
    allowedMethods: ['GET']
    auth: "${SONARQUBE_TOKEN}:"
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
        # Optional: Scope can be configured if needed
        scope: 'read:user, read:org'
        # Optional: Enterprise instance URL
        # enterpriseInstanceUrl: https://github.enterprise.example.com
        # Optional: Allowed organizations for sign-in
        allowedOrganizations: ['interspace-devops']
        privateRepoAccess: true
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}
  
  # Add this section to enable identification of admin users and groups
  roles:
    admin:
      users: [admin]
      groups: [admins]

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options
  github:
    token:
      $env: GITHUB_TOKEN
    visibility: private # or 'internal' or 'private'
  env:
    NODE_OPTIONS: --no-node-snapshot

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, User, Group]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../examples/templates/approval-workflow-template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    # Add the users file with GitHub identities
    - type: file
      target: ../../examples/users.yaml
      rules:
        - allow: [User]

    # Add the technical documentation file
    - type: file
      target: ../../examples/example-docs/catalog-info.yaml
      rules:
        - allow: [Component, System, API, Resource]
        - allow: [Documentation]

    # Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  # GitHub organization integration
  providers:
    github:
      organization:
        name: interspace-devops
        configRefreshIntervalMs: 300000 # 5 minutes

  # Experimental: Always use the search method in UrlReaderProcessor.
  # New adopters are encouraged to enable it as this behavior will be the default in a future release.
  useUrlReadersSearch: true
  githubOrgs:
    - name: interspace-devops
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
      # The GitHub organization name to use for the catalog import
      org: [interspace-devops]

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

permission:
  enabled: true
  
  # Define admin permissions explicitly
  rbac:
    roles:
      admin:
        users: [admin]
        groups: [admins]
      editor:
        users: []
        groups: [guests]
      viewer:
        users: [guest]
        groups: []
    
    policies:
      - role: admin
        effect: allow
        actions: ['*']
      - role: editor
        effect: allow
        actions: ['catalog.entity.read', 'catalog.entity.create']
        resources: ['catalog-entity']
      - role: viewer
        effect: allow
        actions: ['catalog.entity.read']
        resources: ['catalog-entity']

# Add this Jenkins integration configuration
jenkins:
  baseUrl: https://ci.asean-accesstrade.net
  username: ${JENKINS_USERNAME}
  apiKey: ${JENKINS_API_KEY}
  # Optional: custom page title
  pageTitle: My Jenkins Instance
  # Optional: custom Jenkins API path
  # apiBaseUrl: /remote/api

sonarqube:
  baseUrl: https://sonarqube.asean-accesstrade.net
  apiKey: ${SONARQUBE_TOKEN}
  instanceKey: interspace-devops-sonarqube
  # Define instances explicitly
  instances:
    - name: interspace-devops-sonarqube
      baseUrl: https://sonarqube.asean-accesstrade.net
      apiKey: ${SONARQUBE_TOKEN}