apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-nodejs-template
  title: Example Node.js Template
  description: An example template for the scaffolder that creates a simple Node.js service
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Template Parameters
      required:
        - name
        - repoUrl
        - targetPath
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - interspace-devops
              - tunghauvan-interspace
            allowedRepos:
              - backstage-gitok8s
              - software-catalog
        targetPath:
          title: Target Path
          type: string
          description: Path within the repository
          default: '{{ parameters.name | lower }}'
          ui:autofocus: true

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Combined step that fetches template and publishes to GitHub
    - id: fetch-and-publish
      name: Fetch and Publish
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github:pull-request
      input:
        repoUrl: ${{ parameters.repoUrl }}
        branchName: create-${{ parameters.name | lower }}
        targetBranchName: main
        title: "Create new component: ${{ parameters.name }}"
        description: "This PR creates a new ${{ parameters.name }} component"
        targetPath: ${{ parameters.targetPath }}
        reviewers: []
        teamReviewers: []
        commitMessage: "Add ${{ parameters.name }} component"
        update: true
        draft: false
        createWhenEmpty: false

    # # The final step is to register our new component in the catalog.
    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
    #     catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
